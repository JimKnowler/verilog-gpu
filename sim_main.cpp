// include common verilator routines
#include <verilated.h>

// include model header, generated by verilating "Top.h"
#include "VTop.h"

int main(int argc, char* argv[])
{
    // Construct a VerilatedContext to hold simulation time, etc.
    VerilatedContext* const contextp = new VerilatedContext;

    // Pass arguments so Verilated code can see them, e.g. $value$plusargs
    // This needs to be called before you create any model
    contextp->commandArgs(argc, argv);

    // enable internal verilator state for waveform tracing
    // - note : do this before creating module, so that we have the option of 
    //          starting a trace at another time.  
    //          See VerilatedVcdC, top->trace(), trace->open(), trace->dump(), and trace->close()
    // contextp->traceEverOn(true);

    // set debug level
    // contextp->debug(1);

    // Construct the Verilated model, from Vtop.h generated from Verilating "top.v"
    VTop* const top = new VTop{contextp};

    top->a = 3;
    top->b = 5;
    top->eval();

    printf("model result is [%d]\n", top->sum);

    // Final model cleanup
    top->final();

    // Destroy model
    delete top;
    delete contextp;

    return 0;
}